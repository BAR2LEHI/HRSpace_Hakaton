name: HRSpace

on:
  push:
    branches:
      - docker

jobs:
  tests:
    runs-on: ubuntu-latest
    # Блок services аналогичен docker-compose.yml
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r requirements.txt
    # Этот шаг дополним переменными для доступа бд
    - name: Test with flake8 and django tests
      # Добавляем env-переменные для доступа к БД
      env:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
        POSTGRES_DB: postgres
        # Сервер БД запущен в Docker, но его порт проброшен на хост
        # Поэтому подключаемся к 127.0.0.1:5432
        DB_HOST: db_postgre
        DB_PORT: 5432
      run: |
        # python -m flake8 src/
        # cd src/
        # python test запуск тестов

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password
        with:
          username: lordrie
          password: LordYeStEz7
          # Хорошо ли держать логин и пароль прямо в коде workflow?
          # Нет, это нехорошо
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          # Параметр context: указывает, что нужный Dockerfile
          # находится в
          context: .
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: lordrie/backend:latest


  deploy:
    runs-on: ubuntu-latest
    needs:
      # Дождёмся билда всех образов Taski
      - build_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # Копируем docker-compose.production.yml на продакшен-сервер
    - name: Copy docker-compose.prod.yml via ssh
      uses: appleboy/scp-action@master
    # Передаём параметры для action appleboy/scp-action:
      with:
        host: 77.222.53.69
        username: root
        password: U@tUwRLTNVJHR1M2
        source: "docker-compose.prod.yml"
        target: "hr_space"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: 77.222.53.69
        username: root
        password: U@tUwRLTNVJHR1M2
        # Параметр script передаёт в action appleboy/ssh-action команды,
        # которые нужно выполнить на сервере,
        # с которым установлено соединение
        script: |
          cd hr_space
          # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.production.yml pull
          # Перезапускает все контейнеры в Docker Compose
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          # Выполняет миграции и сбор статики